class Hooks{constructor(){this.actions={},this.filters={}}addAction(t,i,o=10){this.actions[t]=this.actions[t]||[],this.actions[t].push({priority:o,callback:i})}addFilter(t,i,o=10){this.filters[t]=this.filters[t]||[],this.filters[t].push({priority:o,callback:i})}removeAction(t,i){this.actions[t]&&(this.actions[t]=this.actions[t].filter(t=>t.callback!==i))}removeFilter(t,i){this.filters[t]&&(this.filters[t]=this.filters[t].filter(t=>t.callback!==i))}doAction(t,i){if(!this.actions[t])return;let o=this._getSortedCallbacks(this.actions[t]);o.forEach(t=>t(i))}applyFilters(t,i,o){if(!this.filters[t])return i;let s=this._getSortedCallbacks(this.filters[t]);return s.forEach(t=>{i=t(i,o)}),i}hasAction(t){return!!this.actions[t]&&this.actions[t].length>0}hasFilter(t){return!!this.filters[t]&&this.filters[t].length>0}_getSortedCallbacks(t){return t.sort((t,i)=>t.priority-i.priority).map(t=>t.callback)}}const hooks=new Hooks,addAction=(t,i,o)=>hooks.addAction(t,i,o),addFilter=(t,i,o)=>hooks.addFilter(t,i,o),removeAction=(t,i)=>hooks.removeAction(t,i),removeFilter=(t,i)=>hooks.removeFilter(t,i),doAction=(t,i)=>hooks.doAction(t,i),applyFilters=(t,i,o)=>hooks.applyFilters(t,i,o),hasAction=t=>hooks.hasAction(t),hasFilter=t=>hooks.hasFilter(t);"undefined"!=typeof window&&(window.hooks=hooks,window.addAction=addAction,window.addFilter=addFilter,window.removeAction=removeAction,window.removeFilter=removeFilter,window.doAction=doAction,window.applyFilters=applyFilters,window.hasAction=hasAction,window.hasFilter=hasFilter),"undefined"!=typeof module&&void 0!==module.exports&&(module.exports={Hooks,addAction,addFilter,removeAction,removeFilter,doAction,applyFilters,hasAction,hasFilter});